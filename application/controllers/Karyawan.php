<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Karyawan extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Karyawan_model');
    }

    /*
     * Listing of karyawan
     */
    function index()
    {
        $data['karyawan'] = $this->Karyawan_model->get_all_karyawan();
        $data['_view'] = 'karyawan/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new karyawan
     */
    function add()
    {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('id_shift', 'Id Shift', 'required');
        $this->form_validation->set_rules('id_mesin', 'Id Mesin', 'required');
        $this->form_validation->set_rules('nama', 'Nama', 'required');

        if ($this->form_validation->run()) {
            $params = array(
                'id_shift' => $this->input->post('id_shift'),
                'id_perusahaan' => $this->input->post('id_perusahaan'),
                'id_mesin' => $this->input->post('id_mesin'),
                'nama' => $this->input->post('nama'),
            );

            $karyawan_id = $this->Karyawan_model->add_karyawan($params);
            redirect('karyawan/index');
        } else {
            $this->load->model('Shift_model');
            $data['all_shift'] = $this->Shift_model->get_all_shift();

            $this->load->model('Perusahaan_model');
            $data['all_perusahaan'] = $this->Perusahaan_model->get_all_perusahaan();

            $this->load->model('Mesin_model');
            $data['all_mesin'] = $this->Mesin_model->get_all_mesin();

            $data['_view'] = 'karyawan/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a karyawan
     */
    function edit($id_karyawan)
    {
        // check if the karyawan exists before trying to edit it
        $data['karyawan'] = $this->Karyawan_model->get_karyawan($id_karyawan);

        if (isset($data['karyawan']['id_karyawan'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('id_shift', 'Id Shift', 'required');
            $this->form_validation->set_rules('id_mesin', 'Id Mesin', 'required');
            $this->form_validation->set_rules('nama', 'Nama', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'id_shift' => $this->input->post('id_shift'),
                    'id_perusahaan' => $this->input->post('id_perusahaan'),
                    'id_mesin' => $this->input->post('id_mesin'),
                    'nama' => $this->input->post('nama'),
                );

                $this->Karyawan_model->update_karyawan($id_karyawan, $params);
                redirect('karyawan/index');
            } else {
                $this->load->model('Shift_model');
                $data['all_shift'] = $this->Shift_model->get_all_shift();

                $this->load->model('Perusahaan_model');
                $data['all_perusahaan'] = $this->Perusahaan_model->get_all_perusahaan();

                $this->load->model('Mesin_model');
                $data['all_mesin'] = $this->Mesin_model->get_all_mesin();

                $data['_view'] = 'karyawan/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The karyawan you are trying to edit does not exist.');
    }

    /*
     * Deleting karyawan
     */
    function remove($id_karyawan)
    {
        $karyawan = $this->Karyawan_model->get_karyawan($id_karyawan);

        // check if the karyawan exists before trying to delete it
        if (isset($karyawan['id_karyawan'])) {
            $this->Karyawan_model->delete_karyawan($id_karyawan);
            redirect('karyawan/index');
        } else
            show_error('The karyawan you are trying to delete does not exist.');
    }
}
